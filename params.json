{"name":"Vim: Usage and Beyond","tagline":"Mark Mossberg, ENG 3302 Project 2","body":"> The material in this reference is specifically written and tested for use on\r\n> Mac OS X from a command line environment, however nearly all of the material\r\n> should be fine on Linux. Most of the material should also be fine for\r\n> graphical VIM environments (MacVim, GVim). Your mileage may vary for use on\r\n> Windows. Additionally this guide isn't designed to be a comprehensive\r\n> reference to VIM usage, the\r\n> [official VIM > documentation](http://www.vim.org/docs.php) already exists\r\n> for that. Rather this guide is intended to be a practical introduction to\r\n> VIM, while also covering areas less commonly seen in VIM guides, such as\r\n> customization.\r\n\r\n## Quick Start\r\n\r\nThis section will provide the required information for users that want to get\r\nstarted using VIM immediately however I strongly recommend reading through the\r\nrest of this document at some point.\r\n\r\nTo open a document for editing, run\r\n\r\n```\r\n$ vim <filename>\r\n```\r\n\r\nPress `i` to enter Insert mode. Use the arrow keys to navigate the cursor to\r\nthe desires position and type as normal.\r\n\r\nTo save, press <escape>, type `:w`, and press <enter>. To begin editing again,\r\nfollow the instruction point above.\r\n\r\nTo exit VIM, press <escape>, type `:q`, and press <enter>. If you want to save\r\nand quit, instead type \":wq\" and press <enter>.\r\n\r\n## Overview\r\n\r\nVIM, not undeservingly, has gained a reputation for being impossible to use, or\r\nat least having a very steep learning curve. This is due to the need to\r\nmemorize many arcane, unintuitive commands and modes just for a purpose as\r\nbasic as typing characters into a file.\r\n\r\nThis comic from the Internet does a good job of illustrating learning VIM\r\nvs other, more beginner friendly editors like Notepad and Pico.\r\n\r\n![](editor-learning-curve.png)\r\n\r\n*Image taken from http://unix.stackexchange.com/questions/986*\r\n\r\n\r\n### What is VIM?\r\n\r\nVIM is a text editor, used for creating and editing plain text files. VIM is\r\ncommonly used for writing computer programs but is more than capable of\r\ncreating any sort of plain text document, like a \"README.txt\" file for example.\r\nVIM is also incredibly versatile and is available and fully functional in both\r\ngraphical and text terminal based environments, lending itself to be used on\r\nboth desktop and server operating systems.\r\n\r\n### What isn't VIM?\r\n\r\nVIM is not a rich text editor. VIM is not designed for the type of text editing\r\nMicrosoft Word is usually associated with and does not support text styling\r\nsuch as bold, italics, or underline.\r\n\r\n## Usage\r\n\r\n### Modes\r\n\r\nVIM has four main modes that you switch between while using it.\r\n\r\n- Normal mode: This is the mode VIM you in by default, and is where you can run\r\neditor commands. Commands are mainly used for navigation around the document,\r\nsearching, and deleting/cut-and-paste'ing.\r\n- Insert mode: This is the standard mode for actually writing text into the file.\r\nYou enter this mode by running the editor command `i` while in normal mode.\r\n- Visual mode: This mode lets you select large blocks of text and perform\r\noperations on them. This emulates the click and drag behavior of graphical\r\ninterfaces if you are using VIM in a text terminal. You enter this mode by\r\nrunning the editor command `v` while in normal mode.\r\n- Command Line mode: This mode lets you enter in VIM commands, distinct from the\r\nabove editor commands, that enable more advanced functionality such as\r\nsearching and replacing in the document, and configuring VIM settings. You\r\nenter this mode by typing `:` while in normal mode.\r\n\r\n### Basic Introduction\r\n\r\n> All commands referenced in this section refer to Normal mode commands.\r\n\r\n#### Opening, Saving, Closing\r\n\r\nTo open a file in VIM, at a command line shell, type `vim <filename>` and press\r\nenter. To save, run the command line command, `w`. To quit, run the command\r\nline command `q`. These command line commands can be chained together; for\r\nexample, to save and quit, run `wq` in command line mode.\r\n\r\n#### Navigation\r\n\r\nBasic navigation in VIM is accomplished by using the `hjkl` keys, corresponding\r\nto the \"left\", \"down\", \"up\", and \"right\" directions respectively. Arrow keys\r\nalso work, but use of them is discouraged since it is much faster to use `hjkl`\r\nand keep your fingers on the home keyboard row. To move more quickly around in\r\nVIM, the `w`, `e`, and `b` keys can also be used. `w` moves to the beginning of\r\nthe next word, `e` moves to the end of the next word, and `b` moves to the\r\nbeginning of the previous word. At any point, to reset VIM and clear any\r\ncommands that may have been entered, hit `<escape>`. To jump up and down half of\r\na window for page-up and page-down behavior, use `Ctrl-d` and `Ctrl-u`. To search\r\nthrough the document, press `/`, type what you are searching for, and press\r\n`<enter>`. This will search from the current cursor position. Press `n` to\r\nproceed forward through the results, or `N` to go backwards.\r\n\r\n#### Editing\r\n\r\nOnce you've navigated the cursor to a location where you would like to insert\r\ntext, press the `i` key to enter Insert mode. Now you can type as normal, using\r\ncharacters keys, arrows and backspace/delete. To exit back into Insert mode,\r\npress `<escape>`.\r\n\r\nIn Normal mode `x` and `X` can be used to delete the character currently under\r\nthe cursor, and the character before the cursor, respectively. The `d` can also\r\nbe paired with an navigational command to delete words or lines at a time. For\r\nexample, pressing `de` will delete every character until the end of the current\r\nword. `dd` is a particularly useful command which deletes the entire line the\r\ncursor is on.\r\n\r\nSomething that may be confusing to new VIM users is that there is no\r\ndistinction between deleting and cutting (referring to cut and paste). That is,\r\nwhen any set of characters is deleted, it is automatically saved in buffer\r\nspace to be pasted when `p`, the paste command, is pressed. To copy characters,\r\nrather than deleting them, the `y` key is used in the same fashion as the `d`\r\nkey. For example, pressing `ye` copies all characters until the end of the\r\ncurrent word. `yy` is also useful, and copies the current line.\r\n\r\nFor more detail on any command, in Normal mode type `:help <command>` where\r\n`<command>` is the command you need help with, and press enter. This will bring\r\nup VIM's extensive documentation on that command or functionality.\r\n\r\n## Customization\r\n\r\nVIM is highly configurable and the average user will likely modify VIM's\r\nbehavior to their own preferences after beginning to use VIM. This can be done\r\nwithin a VIM session using the `set` command line mode command, for example,\r\nrunning `set number` in command line mode enables line numbers along the left\r\nof the window. Configurations done with the `set` command will only last for\r\nthe lifetime of the VIM session (until VIM is quit). Persistent configurations\r\nthat apply to all VIM sessions go in a file named `.vimrc` which must be\r\nlocated in the user's home directory on the system (usually referred to as\r\n`~`). This file simply contains command line mode commands that vim will\r\nrun when it starts. VIM additionally also has a directory called `.vim`, \r\nalso within the user's home directory that is used for storing things like\r\nplugins.\r\n\r\nCommon Customizations\r\n\r\n- `syntax enable`: activates programming language syntax highlighting\r\n- `number`: activates line numbers\r\n- `nowrap`: suppresses default line wrapping when a line gets longer than the\r\n   window\r\n- `mouse=a`: activates mouse usage in text terminals\r\n- `hlsearch`: highlight search terms\r\n- `ignorecase`: ignore letter case when searching\r\n\r\nAn sample `.vimrc` could look like this:\r\n\r\n```\r\nsyntax enable\r\nset nocompatible\r\nset number\r\nset splitbelow\r\nset splitright\r\nset ruler\r\nset foldmethod=indent\r\nset foldlevel=99\r\nset nowrap\r\nset colorcolumn=80\r\nhighlight ColorColumn ctermbg=7 \" light grey color column\r\nset noswapfile\r\nset tabstop=4 shiftwidth=4 softtabstop=4 autoindent expandtab\r\nset hlsearch incsearch ignorecase smartcase\r\n\r\n```\r\n\r\n### Plugins\r\n\r\nPlugins are computer programs written in a language called Vimscript which\r\nfurther extend VIM's functionality. Many of them are available from the\r\nofficial [VIM plugin repository](http://www.vim.org/scripts/), however there are\r\nalso many available from websites like Github, which let users upload code\r\nand other plain text files.. Simple VIM plugins comes in\r\nthe form of a simple .vim file which can be placed in `~/.vim/plugins`. For more\r\ncomplex plugins, each file of the plugin needs to be placed the proper\r\ndirectory. \r\n\r\n#### Plugin Managers\r\n\r\nManaging plugins manually can quickly become very complex, which is why most\r\nusers will find using a plugin manager to be much easier. I'll talk about two\r\nof the most popular ones.\r\n\r\n##### Pathogen\r\n\r\n[Pathogen](https://github.com/tpope/vim-pathogen) was the first popular VIM plugin manager and simplifies plugin\r\ninstallation to be as easy to downloading them into the `~/.vim/bundle`\r\ndirectory.\r\n\r\n##### Vundle\r\n\r\n[Vundle](https://github.com/gmarik/Vundle.vim) is a newer VIM plugin manager\r\nand is popular its direct integration with\r\nGithub and similarity to a package manager, like `apt` on Ubuntu Linux, for\r\nexample. With Vundle, URLs to plugins available from the internet, or local\r\nfile paths to plugins are specified in your `.vimrc` and then easily\r\ninstalled/removed/updated via command line commands like `BundleInstall`.\r\n\r\nThe Vundle section of a `.vimrc` is below. The text in between quotes is the\r\npart of a Github URL, following the `http://github.com/`.\r\n\r\n```\r\n\" Vim plugins\r\nBundle 'scrooloose/nerdtree'\r\nBundle 'scrooloose/syntastic'\r\nBundle 'tpope/vim-commentary'\r\nBundle 'ervandew/supertab'\r\nBundle 'tomtom/tlib_vim'\r\nBundle 'MarcWeber/vim-addon-mw-utils'\r\nBundle 'garbas/vim-snipmate'\r\nBundle 'honza/vim-snippets'\r\nBundle 'majutsushi/tagbar'\r\nBundle 'dag/vim-fish'\r\nBundle 'bling/vim-airline'\r\nBundle 'sjl/gundo.vim'\r\nBundle 'kien/ctrlp.vim'\r\n```\r\n\r\nUsing Vundle looks like:\r\n\r\n![](vundle.png)\r\n\r\n### Common/Recommended Plugins\r\n\r\n- [NerdTree](https://github.com/scrooloose/nerdtree): Creates a file browser within VIM which makes it much easier to\r\n  navigate a project with multiple files\r\n- [Syntastic](https://github.com/scrooloose/syntastic): Programming language syntax checking\r\n- [Snipmate](https://github.com/garbas/vim-snipmate): Easily insert certain textual snippets, useful for progammers\r\n- [Commentary](https://github.com/tpope/vim-commentary): Easily comment out code\r\n\r\n## Further Reading\r\n\r\n- [Official Vim Documentation](www.vim.org/docs.php)\r\n- [Vim Tips Wiki](http://vim.wikia.com/wiki/Vim_Tips_Wiki)\r\n- [Thoughtbot Vim Guides](http://robots.thoughtbot.com/tags/vim)\r\n- [Vim Awesome](http://vimawesome.com/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}